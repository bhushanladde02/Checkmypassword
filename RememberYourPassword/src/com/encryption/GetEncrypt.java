package com.encryption;

import java.io.UnsupportedEncodingException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import java.util.HashMap;
import java.util.Map;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.codec.binary.Base64;


public class GetEncrypt {

	//byte[] iv=null;
	Map<String, byte[]> m = new HashMap<String, byte[]>();

	public byte[] encryptData(String strDataToEncrypt,String key){

		byte[] encryptedData = null;	
		byte[] encodedKey     = Base64.decodeBase64(key);

		//System.out.println("encoded key::::::::"+encodedKey);
		// SecretKey secretKey = new SecretKeySpec(encodedKey, 0, encodedKey.length, "DES");

		char[] password = key.toCharArray();



		//algorithm for generating seed
		try {

			/* Derive the key, given password and salt. */
			SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
			KeySpec spec = new PBEKeySpec(password, encodedKey, 65536, 256);
			SecretKey tmp = factory.generateSecret(spec);
			SecretKey secret = new SecretKeySpec(tmp.getEncoded(), "AES");



			// Initialize a secure random number generator
			SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");

			// Method 1 - Calling nextBytes method to generate Random Bytes
			byte[] bytes = new byte[512];
			secureRandom.nextBytes(bytes); 

			// Printing the SecureRandom number by calling secureRandom.nextDouble()
			// System.out.println(" Secure Random # generated by calling nextBytes() is " + secureRandom.nextDouble());

			// Method 2 - Using setSeed(byte[]) to re-seed a Random object
			int seedByteCount = 10;
			byte[] seed = secureRandom.generateSeed(seedByteCount);   

			secureRandom.setSeed(seed);
			//  System.out.println(" Secure Random # generated using setSeed(byte[]) is  " + secureRandom.nextDouble());



			//algorithm for encryption

			//Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
			//System.out.println("test.......!!!!!!!!!!!!!");
			//cipher.init(Cipher.ENCRYPT_MODE, secret);

			//AlgorithmParameters params = cipher.getParameters();
			// iv = params.getParameterSpec(IvParameterSpec.class).getIV();
			//encryptedData = cipher.doFinal(strDataToEncrypt.getBytes("UTF-8"));


			/***********************************************************************/
			Cipher aesCipher = Cipher.getInstance("AES");
			aesCipher.init(Cipher.ENCRYPT_MODE,secret);
			byte[] byteDataToEncrypt = strDataToEncrypt.getBytes("UTF-8");
			encryptedData = aesCipher.doFinal(byteDataToEncrypt); 
			//strCipherText = new BASE64Encoder().encode(byteCipherText);
			//System.out.println("Cipher Text generated using AES is " +strCipherText);







		} catch (NoSuchAlgorithmException noSuchAlgo)
		{
			System.out.println(" No Such Algorithm exists " + noSuchAlgo);
		} catch (NoSuchPaddingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvalidKeyException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalBlockSizeException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (BadPaddingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			//} catch (InvalidParameterSpecException e) {
			// TODO Auto-generated catch block
			//e.printStackTrace();
		} catch (InvalidKeySpecException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return encryptedData;
	}


	public String decryptData(byte[] strTextToDecrypt,String key){


		byte[] encodedKey     = Base64.decodeBase64(key);
		// SecretKey secretKey = new SecretKeySpec(encodedKey, 0, encodedKey.length, "DES");

		char[] password = key.toCharArray();



		//algorithm for generating seed
		try {

			/* Derive the key, given password and salt. */
			SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
			KeySpec spec = new PBEKeySpec(password, encodedKey, 65536, 256);
			SecretKey tmp = factory.generateSecret(spec);
			SecretKey secret = new SecretKeySpec(tmp.getEncoded(), "AES");

			// Method 1 - Calling nextBytes method to generate Random Bytes
			byte[] bytes = new byte[512];
			//secureRandom.nextBytes(bytes); 

			// Printing the SecureRandom number by calling secureRandom.nextDouble()
			//System.out.println(" Secure Random # generated by calling nextBytes() is " + secureRandom.nextDouble());

			// Method 2 - Using setSeed(byte[]) to re-seed a Random object
			int seedByteCount = 10;
			//byte[] seed = secureRandom.generateSeed(seedByteCount);   

			//secureRandom.setSeed(seed);
			//System.out.println(" Secure Random # generated using setSeed(byte[]) is  " + secureRandom.nextDouble());




			/* Decrypt the message, given derived key and initialization vector. */
			//Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
			//cipher.init(Cipher.DECRYPT_MODE, secret);
			//String strDecryptedText = new String(cipher.doFinal(strTextToDecrypt), "UTF-8");
			/**********************************************************************/
			Cipher aesCipher = Cipher.getInstance("AES");
			aesCipher.init(Cipher.DECRYPT_MODE,secret,aesCipher.getParameters());
			byte[] byteDecryptedText = aesCipher.doFinal(strTextToDecrypt);
			String strDecryptedText = new String(byteDecryptedText);
			//System.out.println(" Decrypted Text message is " +strDecryptedText);





			return strDecryptedText;

		} catch (NoSuchAlgorithmException noSuchAlgo)
		{
			System.out.println(" No Such Algorithm exists " + noSuchAlgo);
		} catch (InvalidKeyException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			//} catch (InvalidAlgorithmParameterException e) {
			// TODO Auto-generated catch block
			//e.printStackTrace();
		} catch (IllegalBlockSizeException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (BadPaddingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NoSuchPaddingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			//} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			//e.printStackTrace();
		} catch (InvalidKeySpecException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvalidAlgorithmParameterException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}


	public byte[] StringToByte(String abc){
		Base64 base64 = new Base64();
		byte[] byteVal = base64.decode(abc);
		return byteVal;
	}


	public String ByteToString(byte[] abc){
		Base64 base64 = new Base64();
		String strData = base64.encodeToString(abc).trim();
		return strData;
	}
	public static void main(String[] args) {
		GetEncrypt encryptd = new GetEncrypt();
		String[] tobeEncrypt = {"yogesh", "nikhil","jyotsana","bhushan"};

		/*for(int i=0; i<tobeEncrypt.length ; i++){
			byte[] encryptedData =encryptd.encryptData(tobeEncrypt[i], "207244291");
			System.out.println( "Encrypted data :: " + i + " :: "+ encryptd.encryptData(tobeEncrypt[i], "207244291"));
			System.out.println("Decrypted data::: " + i + " :::"+ encryptd.decryptData(encryptedData,"207244291"));

		}
		 */		
		byte[] encryptedData =encryptd.encryptData("yogesh", "123");
		String OpFinal =  encryptd.decryptData(encryptedData,"123");
		System.out.println("-------------------OpFinal:::  " + OpFinal);


		byte[] encryptedData1 =encryptd.encryptData("kiran", "456");
		String Op2 = encryptd.decryptData(encryptedData1,"456");
		System.out.println("-------------------OpFinal:::  " + Op2);


		byte[] encryptedData2 =encryptd.encryptData("bhushan", "678");
		String Op1 = encryptd.decryptData(encryptedData2,"678");
		System.out.println("-------------------OpFinal : : : " + Op1 );














		//byte[] encryptedData =  encryptd.encryptData("jyot874s4anan!10name", "207244291");
		//System.out.println(encryptedData);
		//System.out.println("Decrypted data::::::"+ encryptd.decryptData(encryptedData,"207244291"));		
	}
}
